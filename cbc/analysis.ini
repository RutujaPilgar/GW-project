; PyCBC configuration for BNS-NSBH-BBH search on O1 data
;
; Tests and decisions for some of the parameters in this configuration file
; are documented here:
;
;    https://www.lsc-group.phys.uwm.edu/ligovirgo/cbcnote/ER8/pycbc_offline
;
; Documentation for running the workflow generator is here:
;
;    http://ligo-cbc.github.io/pycbc/releases/v1.2.0/html/workflow/pycbc_make_coinc_search_workflow.html


[workflow]
; http://ligo-cbc.github.io/pycbc/releases/v1.2.0/html/workflow/initialization.html
file-retention-level = all_triggers


[workflow-datafind]
; http://ligo-cbc.github.io/pycbc/releases/v1.2.0/html/workflow/datafind.html
datafind-method = AT_RUNTIME_SINGLE_FRAMES

; Look for times when the segment database sayd that data is analyzable, but
; no frame data exists on disk. If any frame data is missing, raise an error
datafind-check-segment-gaps = raise_error

; Stat each frame that datafind returns and fail if any frames are missing
datafind-check-frames-exist = raise_error

; Check to see if there are any frames on disk that are not covered in the
; segment_summary table for science segments. This must be "warn" when using
; C00 date, due to known discrepancies between the database segments and GDS
; frames, but should be set to "raise_error" for the final calibration.
datafind-check-segment-summary = warn


[workflow-segments]
; http://ligo-cbc.github.io/pycbc/releases/v1.2.0/html/workflow/segments.html
segments-method = ALL_SINGLE_IFO_TIME

[workflow-tmpltbank]
; See http://ligo-cbc.github.io/pycbc/releases/v1.2.0/html/workflow/template_bank.html
tmpltbank-method = PREGENERATED_BANK
tmpltbank-pregenerated-bank = https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/41676894561059629eb5715673d7e6dea7a76865/ER8/bank/H1L1-UBERBANK_MAXM100_NS0p05_ER8HMPSD-1126033217-223200.xml.gz

[workflow-splittable]
; http://ligo-cbc.github.io/pycbc/releases/v1.2.0/html/workflow/splittable.html
splittable-method = IN_WORKFLOW
splittable-num-banks = 20
splittable-exe-tag = splitbank

[workflow-matchedfilter]
; http://ligo-cbc.github.io/pycbc/releases/v1.2.0/html/workflow/matched_filter.html
matchedfilter-method = WORKFLOW_INDEPENDENT_IFOS
min-analysis-segments = 15
max-analysis-segments = 15
output-type = hdf

[workflow-coincidence]
; http://ligo-cbc.github.io/pycbc/releases/v1.2.0/html/workflow/hdf_coincidence.html
background-bins = bns:chirp:1.74 edge:SEOBNRv2Peak:100 bulk:total:150

[workflow-coincidence-full]
parallelization-factor = 20

[workflow-coincidence-inj]
parallelization-factor = 5

[workflow-psd]
parallelization-factor = 10


[llwadd]

[segments_from_cats]

[ligolw_combine_segments]

[splitbank]
; split the template bank up randomly between jobs to ensure equal run time
random-sort =
; set a seed so that the random split is deterministic
random-seed = 666

[inspiral]
; parameters for matched filtering

; amount of buffer data for letting filters settle
pad-data = 8

; conditioning high-pass filter
strain-high-pass = 20

; working sample rate for matched filtering
sample-rate = 4096

; segmentation of the data
; start-pad must be long enough to contain a full BNS signal
segment-length = 256
segment-start-pad = 112
segment-end-pad = 16

; estimation of the noise PSD and construction of the whitening filter
psd-estimation = median
psd-segment-length = 16
psd-segment-stride = 8
psd-inverse-length = 16

; starting frequency of matched filter integration
low-frequency-cutoff = 30

; template approximant
; switch to SEOBNRv2 templates as soon as we can (M >= 4)
approximant = "'SPAtmplt' if (params.mass1 + params.mass2) < 4 else 'SEOBNRv2_ROM_DoubleSpin'"
order = -1

; threshold for generating triggers
snr-threshold = 5.5

; method for clustering triggers over time
cluster-method = window
cluster-window = 1
cluster-function = symmetric

; signal-based vetoes
chisq-bins = "1.75*(get_freq('fSEOBNRv2Peak',params.mass1,params.mass2,params.spin1z,params.spin2z)-60.)**0.5"
newsnr-threshold = 5

; options for reducing the computational cost and storage
filter-inj-only = 
injection-window = 4.5
processing-scheme = mkl


[workflow-gating]
; see gps_times_er8{a,b}.ini for locations of the pregenerated files
gating-method = PREGENERATED_FILE

[inspiral-h1]
; Hanford specific matched-filter parameters
channel-name = ${workflow|h1-channel-name}

[inspiral-l1]
; Livingston specific matched-filter parameters
channel-name = ${workflow|l1-channel-name}

[pegasus_profile-calculate_psd]
condor|request_cpus = ${calculate_psd|cores}
dagman|priority=1000

[calculate_psd]
cores = 4
low-frequency-cutoff = ${inspiral|low-frequency-cutoff}
pad-data = ${inspiral|pad-data}
strain-high-pass = ${inspiral|strain-high-pass}
sample-rate = ${inspiral|sample-rate}
segment-length = ${inspiral|segment-length}
segment-start-pad = ${inspiral|segment-start-pad}
segment-end-pad = ${inspiral|segment-end-pad}
psd-estimation = ${inspiral|psd-estimation}
psd-segment-length = ${inspiral|psd-segment-length}
psd-segment-stride = ${inspiral|psd-segment-stride}

[merge_psds]

[calculate_psd-h1]
channel-name = ${workflow|h1-channel-name}

[calculate_psd-l1]
channel-name = ${workflow|l1-channel-name}

[hdf_trigger_merge]

[bank2hdf]

[distribute_background_bins]

[coinc]
; additional time (in seconds) to add to light-travel time to construct time coincidence window
coinc-threshold = 0.005
ranking-statistic = newsnr
strict-coinc-time =

[coinc-full]
; time-slide interval in seconds
timeslide-interval = 0.2
; reduction factor to make lightning bolts for IFAR plots
decimation-factor = 1000
; always store the loudest 500 triggers from the time slides
loudest-keep = 500

[coinc-fullinj&coinc-injfull]
; perform little-dog analysis for software injections
timeslide-interval = ${coinc-full|timeslide-interval}
cluster-window = ${statmap|cluster-window}
; keep only triggers with a newsnr above 8.5 in injection little-dog analysis
loudest-keep-value = 8.5

[pegasus_profile-statmap&pegasus_profile-statmap_inj]
condor|request_memory = 15000

[statmap&statmap_inj]
; time window (in seconds) used to remove triggers around zero-lag coincidences
veto-window = 0.100
; cluster each slide separately over a 10 second window
cluster-window = 10.0

[combine_statmap]
cluster-window = ${statmap|cluster-window}

[foreground_censor]
strict-coinc-time =

[hdfinjfind]
; time in seconds within which a trigger must fall to be associated with an injection
injection-window = 2.0
optimal-snr-column = H1:alpha1 L1:alpha2
